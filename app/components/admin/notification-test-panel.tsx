"use client";

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { NotificationService } from '@/lib/notifications';
import { VoteService, type Vote } from '@/lib/appwrite';
import { Mail, Send, Clock, BarChart, Users } from 'lucide-react';

export function NotificationTestPanel() {
  const [isLoading, setIsLoading] = useState(false);
  const [testResult, setTestResult] = useState<string>('');
  const [activeVotes, setActiveVotes] = useState<Vote[]>([]);
  const [testEmail, setTestEmail] = useState('');

  // Pobierz aktywne g≈Çosowania
  const loadActiveVotes = async () => {
    const votes = await VoteService.getAll();
    const active = votes.filter(vote => VoteService.isVoteActive(vote));
    setActiveVotes(active);
  };

  // Test wysy≈Çania powiadomienia o nowym g≈Çosowaniu
  const testNewVoteNotification = async (vote: Vote) => {
    setIsLoading(true);
    setTestResult('üîÑ Wysy≈Çanie powiadomienia o nowym g≈Çosowaniu...');
    
    try {
      const success = await NotificationService.sendVoteNotification(vote);
      if (success) {
        setTestResult('‚úÖ Powiadomienie o nowym g≈Çosowaniu wys≈Çane pomy≈õlnie!');
      } else {
        setTestResult('‚ùå B≈ÇƒÖd podczas wysy≈Çania powiadomienia o nowym g≈Çosowaniu');
      }
    } catch (error) {
      setTestResult(`‚ùå B≈ÇƒÖd: ${error}`);
    }
    
    setIsLoading(false);
  };

  // Test wysy≈Çania przypomnienia
  const testReminderNotification = async (vote: Vote, hours: number) => {
    setIsLoading(true);
    setTestResult(`üîÑ Wysy≈Çanie przypomnienia (${hours}h przed ko≈Ñcem)...`);
    
    try {
      const success = await NotificationService.sendVoteReminderNotification(vote, hours);
      if (success) {
        setTestResult(`‚úÖ Przypomnienie (${hours}h) wys≈Çane pomy≈õlnie!`);
      } else {
        setTestResult(`‚ùå B≈ÇƒÖd podczas wysy≈Çania przypomnienia`);
      }
    } catch (error) {
      setTestResult(`‚ùå B≈ÇƒÖd: ${error}`);
    }
    
    setIsLoading(false);
  };

  // Test wysy≈Çania wynik√≥w
  const testResultsNotification = async (vote: Vote) => {
    setIsLoading(true);
    setTestResult('üîÑ Wysy≈Çanie wynik√≥w g≈Çosowania...');
    
    try {
      const success = await NotificationService.sendVoteResultsNotification(vote);
      if (success) {
        setTestResult('‚úÖ Wyniki g≈Çosowania wys≈Çane pomy≈õlnie!');
      } else {
        setTestResult('‚ùå B≈ÇƒÖd podczas wysy≈Çania wynik√≥w');
      }
    } catch (error) {
      setTestResult(`‚ùå B≈ÇƒÖd: ${error}`);
    }
    
    setIsLoading(false);
  };

  // Test schedulera przypomnie≈Ñ
  const testScheduler = async () => {
    setIsLoading(true);
    setTestResult('üîÑ Uruchamianie scheduler przypomnie≈Ñ...');
    
    try {
      await NotificationService.scheduleVoteReminders();
      setTestResult('‚úÖ Scheduler przypomnie≈Ñ uruchomiony pomy≈õlnie!');
    } catch (error) {
      setTestResult(`‚ùå B≈ÇƒÖd schedulera: ${error}`);
    }
    
    setIsLoading(false);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">Panel Testowy Powiadomie≈Ñ</h2>
          <p className="text-muted-foreground">
            Testowanie funkcji powiadomie≈Ñ email przez Appwrite Messaging
          </p>
        </div>
        <Button onClick={loadActiveVotes} variant="outline" size="sm">
          <Users className="w-4 h-4 mr-2" />
          Od≈õwie≈º g≈Çosowania
        </Button>
      </div>

      {/* Status powiadomie≈Ñ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Mail className="w-5 h-5" />
            Status Systemu Powiadomie≈Ñ
          </CardTitle>
          <CardDescription>
            Sprawd≈∫ konfiguracjƒô i dostƒôpno≈õƒá systemu powiadomie≈Ñ
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="flex items-center gap-2">
              <Badge variant="secondary">Provider</Badge>
              <span className="text-sm">Mailgun (via Appwrite)</span>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="secondary">Status</Badge>
              <Badge variant="outline">Skonfigurowane</Badge>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="secondary">Typ</Badge>
              <span className="text-sm">HTML Email</span>
            </div>
          </div>
          
          <div className="pt-4">
            <Button onClick={testScheduler} disabled={isLoading} variant="outline">
              <Clock className="w-4 h-4 mr-2" />
              Test Scheduler Przypomnie≈Ñ
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Aktywne g≈Çosowania */}
      <Card>
        <CardHeader>
          <CardTitle>Aktywne G≈Çosowania</CardTitle>
          <CardDescription>
            Testuj powiadomienia dla istniejƒÖcych g≈Çosowa≈Ñ
          </CardDescription>
        </CardHeader>
        <CardContent>
          {activeVotes.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              <p>Brak aktywnych g≈Çosowa≈Ñ</p>
              <p className="text-sm">Utw√≥rz nowe g≈Çosowanie, aby przetestowaƒá powiadomienia</p>
            </div>
          ) : (
            <div className="space-y-4">
              {activeVotes.map((vote) => (
                <div key={(vote as any).$id} className="border rounded-lg p-4 space-y-3">
                  <div className="flex items-start justify-between">
                    <div>
                      <h4 className="font-medium">{vote.title}</h4>
                      <p className="text-sm text-muted-foreground">{vote.description}</p>
                      <p className="text-xs text-muted-foreground mt-1">
                        Kategoria: {vote.category} ‚Ä¢ Ko≈Ñczy siƒô: {new Date(vote.deadline).toLocaleString('pl-PL')}
                      </p>
                    </div>
                    <Badge variant={vote.isFinished ? 'secondary' : 'default'}>
                      {vote.isFinished ? 'Zako≈Ñczone' : 'Aktywne'}
                    </Badge>
                  </div>
                  
                  <div className="flex flex-wrap gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => testNewVoteNotification(vote)}
                      disabled={isLoading}
                    >
                      <Send className="w-3 h-3 mr-1" />
                      Test: Nowe g≈Çosowanie
                    </Button>
                    
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => testReminderNotification(vote, 24)}
                      disabled={isLoading}
                    >
                      <Clock className="w-3 h-3 mr-1" />
                      Test: Przypomnienie 24h
                    </Button>
                    
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => testReminderNotification(vote, 2)}
                      disabled={isLoading}
                    >
                      <Clock className="w-3 h-3 mr-1" />
                      Test: Przypomnienie 2h
                    </Button>
                    
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => testResultsNotification(vote)}
                      disabled={isLoading}
                    >
                      <BarChart className="w-3 h-3 mr-1" />
                      Test: Wyniki
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Wynik test√≥w */}
      {testResult && (
        <Card>
          <CardHeader>
            <CardTitle>Wynik Testu</CardTitle>
          </CardHeader>
          <CardContent>
            <Textarea
              value={testResult}
              readOnly
              className="min-h-[100px] font-mono text-sm"
            />
          </CardContent>
        </Card>
      )}

      {/* Instrukcje */}
      <Card>
        <CardHeader>
          <CardTitle>Instrukcje Konfiguracji</CardTitle>
          <CardDescription>
            Krok po kroku instrukcje konfiguracji powiadomie≈Ñ
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <h4 className="font-medium">1. Konfiguracja Provider'a w Appwrite:</h4>
            <p className="text-sm text-muted-foreground">
              ‚Ä¢ Przejd≈∫ do Appwrite Console ‚Üí Messaging ‚Üí Providers<br />
              ‚Ä¢ Dodaj nowego provider'a typu Email (Mailgun)<br />
              ‚Ä¢ Skopiuj Provider ID
            </p>
          </div>
          
          <div className="space-y-2">
            <h4 className="font-medium">2. Aktualizacja kodu:</h4>
            <p className="text-sm text-muted-foreground">
              ‚Ä¢ Otw√≥rz plik <code className="bg-muted px-1 rounded">app/lib/notifications.ts</code><br />
              ‚Ä¢ Znajd≈∫ zmiennƒÖ <code className="bg-muted px-1 rounded">MAILGUN_PROVIDER_ID</code><br />
              ‚Ä¢ Zamie≈Ñ 'YOUR_MAILGUN_PROVIDER_ID' na rzeczywiste ID
            </p>
          </div>
          
          <div className="space-y-2">
            <h4 className="font-medium">3. Testowanie:</h4>
            <p className="text-sm text-muted-foreground">
              ‚Ä¢ U≈ºyj przycisk√≥w powy≈ºej do testowania<br />
              ‚Ä¢ Sprawd≈∫ logi w konsoli deweloperskiej<br />
              ‚Ä¢ Zweryfikuj dostarczenie emaili
            </p>
          </div>
          
          <Badge variant="outline" className="mt-4">
            üí° Pamiƒôtaj: Powiadomienia sƒÖ wysy≈Çane tylko do zweryfikowanych u≈ºytkownik√≥w z adresem email
          </Badge>
        </CardContent>
      </Card>
    </div>
  );
}
